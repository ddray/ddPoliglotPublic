// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ddPoliglotV6.Data;

namespace ddPoliglotV6.Data.Migrations
{
    [DbContext(typeof(ddPoliglotDbContext))]
    [Migration("20210618165233_RateTmp")]
    partial class RateTmp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.Article", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LanguageTranslation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TextHashCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TextSpeechFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VideoFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ArticleID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.ArticleActor", b =>
                {
                    b.Property<int>("ArticleActorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<bool>("DefaultInRole")
                        .HasColumnType("bit");

                    b.Property<Guid>("KeyGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("VoiceName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("VoicePitch")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VoiceSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ArticleActorID");

                    b.HasIndex("ArticleID");

                    b.ToTable("ArticleActors");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.ArticleByParam", b =>
                {
                    b.Property<int>("ArticleByParamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DataJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("bit");

                    b.Property<int>("LearnLanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NativeLanguageID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArticleByParamID");

                    b.ToTable("ArticleByParams");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.ArticlePhrase", b =>
                {
                    b.Property<int>("ArticlePhraseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<int>("ArticleActorID")
                        .HasColumnType("int");

                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<bool>("ChildrenClosed")
                        .HasColumnType("bit");

                    b.Property<string>("ChildrenType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasChildren")
                        .HasColumnType("bit");

                    b.Property<long>("HashCode")
                        .HasColumnType("bigint");

                    b.Property<Guid>("KeyGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<string>("ParentKeyGuid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Pause")
                        .HasColumnType("int");

                    b.Property<bool>("Silent")
                        .HasColumnType("bit");

                    b.Property<int>("SpeachDuration")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("TextSpeechFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TrArticleActorID")
                        .HasColumnType("int");

                    b.Property<long>("TrHashCode")
                        .HasColumnType("bigint");

                    b.Property<int>("TrPause")
                        .HasColumnType("int");

                    b.Property<int>("TrSpeachDuration")
                        .HasColumnType("int");

                    b.Property<string>("TrText")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("TrTextSpeechFileName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ArticlePhraseID");

                    b.HasIndex("ArticleActorID");

                    b.HasIndex("ArticleID");

                    b.HasIndex("TrArticleActorID");

                    b.ToTable("ArticlePhrases");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.Language", b =>
                {
                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CodeFull")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LanguageID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.Lesson", b =>
                {
                    b.Property<int>("LessonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ArticleByParamID")
                        .HasColumnType("int");

                    b.Property<string>("Audio1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Audio2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Audio3")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Audio4")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Audio5")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Description1")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Description2")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Description3")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Description4")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Description5")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Image1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Image2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Image3")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Image4")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Image5")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NativeLanguageID")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PageName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Video1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Video2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Video3")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Video4")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Video5")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("LessonID");

                    b.HasIndex("LanguageID");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.Log", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LogID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.MixItem", b =>
                {
                    b.Property<int>("MixItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChildrenType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EndPhrase")
                        .HasColumnType("bit");

                    b.Property<string>("InContext")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("InDict")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("KeyGuid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MixParamID")
                        .HasColumnType("int");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<bool>("Pretext")
                        .HasColumnType("bit");

                    b.Property<string>("Source")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("baseWord")
                        .HasColumnType("bit");

                    b.HasKey("MixItemID");

                    b.HasIndex("MixParamID");

                    b.ToTable("MixItems");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.MixParam", b =>
                {
                    b.Property<int>("MixParamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ArticlePhraseKeyGuid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("M0")
                        .HasColumnType("bit");

                    b.Property<bool>("M01")
                        .HasColumnType("bit");

                    b.Property<bool>("M012")
                        .HasColumnType("bit");

                    b.Property<bool>("M0123")
                        .HasColumnType("bit");

                    b.Property<bool>("M0123_repeat")
                        .HasColumnType("bit");

                    b.Property<bool>("M012_repeat")
                        .HasColumnType("bit");

                    b.Property<bool>("M01_repeat")
                        .HasColumnType("bit");

                    b.Property<bool>("M0_repeat")
                        .HasColumnType("bit");

                    b.Property<string>("Offer1")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Offer2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Offer3")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Offer4")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Offer5")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("PhrasesMixType")
                        .HasColumnType("int");

                    b.Property<int>("Repeat")
                        .HasColumnType("int");

                    b.Property<int>("RepeatBaseWord")
                        .HasColumnType("int");

                    b.Property<int>("RepeatOrder")
                        .HasColumnType("int");

                    b.Property<long>("TextHashCode")
                        .HasColumnType("bigint");

                    b.Property<bool>("TrActive")
                        .HasColumnType("bit");

                    b.Property<bool>("TrAddSlow2InRepeatOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("TrAddSlowInRepeatOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("TrFirst")
                        .HasColumnType("bit");

                    b.Property<bool>("TrM0")
                        .HasColumnType("bit");

                    b.Property<bool>("TrM01")
                        .HasColumnType("bit");

                    b.Property<bool>("TrM012")
                        .HasColumnType("bit");

                    b.Property<bool>("TrM0123")
                        .HasColumnType("bit");

                    b.Property<bool>("TrM0123_repeat")
                        .HasColumnType("bit");

                    b.Property<bool>("TrM012_repeat")
                        .HasColumnType("bit");

                    b.Property<bool>("TrM01_repeat")
                        .HasColumnType("bit");

                    b.Property<bool>("TrM0_repeat")
                        .HasColumnType("bit");

                    b.Property<string>("TrOffer1")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TrOffer2")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TrOffer3")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TrOffer4")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TrOffer5")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("TrRepeat")
                        .HasColumnType("int");

                    b.Property<int>("TrRepeatBaseWord")
                        .HasColumnType("int");

                    b.Property<int>("TrRepeatOrder")
                        .HasColumnType("int");

                    b.Property<long>("TrTextHashCode")
                        .HasColumnType("bigint");

                    b.Property<bool>("addSlow2InRepeatOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("addSlowInRepeatOrder")
                        .HasColumnType("bit");

                    b.Property<string>("beforeAllDirMixDictorPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("beforeAllRevMixDictorPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("beforeBaseWordsDirMixDictorPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("beforeBaseWordsRevMixDictorPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("beforeByOrderMixDictorPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("beforeFinishDictorPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("finishDictorPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstBeforeDialogDictorPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstDictorPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("insideAllDirMixDictorPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("insideAllRevMixDictorPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("insideBaseWordsDirMixDictorPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("insideBaseWordsRevMixDictorPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("insideByOrderMixDictorPhrases")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MixParamID");

                    b.ToTable("MixParams");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.MixParamTextTemp", b =>
                {
                    b.Property<int>("MixParamTextTempID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("KeyTemp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LearnLanguageID")
                        .HasColumnType("int");

                    b.Property<int>("NativeLanguageID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("ntext");

                    b.HasKey("MixParamTextTempID");

                    b.ToTable("MixParamTextTemps");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.SpeechFile", b =>
                {
                    b.Property<int>("SpeechFileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<long>("HashCode")
                        .HasColumnType("bigint");

                    b.Property<string>("SpeechFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("SpeechFileID");

                    b.ToTable("SpeechFiles");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.Word", b =>
                {
                    b.Property<int>("WordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<long>("HashCode")
                        .HasColumnType("bigint");

                    b.Property<long>("HashCodeSpeed1")
                        .HasColumnType("bigint");

                    b.Property<long>("HashCodeSpeed2")
                        .HasColumnType("bigint");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<int>("OxfordLevel")
                        .HasColumnType("int");

                    b.Property<string>("Pronunciation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("RateTmp")
                        .HasColumnType("int");

                    b.Property<int>("SpeachDuration")
                        .HasColumnType("int");

                    b.Property<int>("SpeachDurationSpeed1")
                        .HasColumnType("int");

                    b.Property<int>("SpeachDurationSpeed2")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TextSpeechFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TextSpeechFileNameSpeed1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TextSpeechFileNameSpeed2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WordID");

                    b.HasIndex("LanguageID");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.WordPhrase", b =>
                {
                    b.Property<int>("WordPhraseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<long>("HashCode")
                        .HasColumnType("bigint");

                    b.Property<long>("HashCodeSpeed1")
                        .HasColumnType("bigint");

                    b.Property<long>("HashCodeSpeed2")
                        .HasColumnType("bigint");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.Property<int>("SpeachDuration")
                        .HasColumnType("int");

                    b.Property<int>("SpeachDurationSpeed1")
                        .HasColumnType("int");

                    b.Property<int>("SpeachDurationSpeed2")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("TextSpeechFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TextSpeechFileNameSpeed1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TextSpeechFileNameSpeed2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WordsUsed")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.HasKey("WordPhraseID");

                    b.HasIndex("LanguageID");

                    b.ToTable("WordPhrases");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.WordPhraseTranslation", b =>
                {
                    b.Property<int>("WordPhraseTranslationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<long>("HashCode")
                        .HasColumnType("bigint");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<int>("SpeachDuration")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TextSpeechFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("WordPhraseID")
                        .HasColumnType("int");

                    b.HasKey("WordPhraseTranslationID");

                    b.HasIndex("LanguageID");

                    b.HasIndex("WordPhraseID");

                    b.ToTable("WordPhraseTranslations");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.WordPhraseWord", b =>
                {
                    b.Property<int>("WordPhraseWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("PhraseOrder")
                        .HasColumnType("int");

                    b.Property<int>("WordID")
                        .HasColumnType("int");

                    b.Property<int>("WordPhraseID")
                        .HasColumnType("int");

                    b.HasKey("WordPhraseWordID");

                    b.HasIndex("WordID");

                    b.HasIndex("WordPhraseID");

                    b.ToTable("WordPhraseWords");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.WordTranslation", b =>
                {
                    b.Property<int>("WordTranslationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<long>("HashCode")
                        .HasColumnType("bigint");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<int>("ReadyForLessonPhrasiesCnt")
                        .HasColumnType("int");

                    b.Property<int>("SpeachDuration")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TextSpeechFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("WordID")
                        .HasColumnType("int");

                    b.HasKey("WordTranslationID");

                    b.HasIndex("LanguageID");

                    b.HasIndex("WordID");

                    b.ToTable("WordTranslations");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.WordUser", b =>
                {
                    b.Property<int>("WordUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<int>("LastRepeatInArticleByParamID")
                        .HasColumnType("int");

                    b.Property<int>("LastRepeatInLessonNum")
                        .HasColumnType("int");

                    b.Property<int>("LastRepeatWordPhraseId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WordID")
                        .HasColumnType("int");

                    b.HasKey("WordUserID");

                    b.HasIndex("LanguageID");

                    b.HasIndex("WordID");

                    b.ToTable("WordUsers");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.WordsForPhraseState", b =>
                {
                    b.Property<int>("WordsForPhraseStateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<int>("NativeLanguageID")
                        .HasColumnType("int");

                    b.Property<string>("WordsForPhraseStateData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WordsForPhraseStateID");

                    b.HasIndex("LanguageID");

                    b.ToTable("WordsForPhraseStates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ddPoliglotV6.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ddPoliglotV6.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ddPoliglotV6.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ddPoliglotV6.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.ArticleActor", b =>
                {
                    b.HasOne("ddPoliglotV6.Data.Models.Article", "Article")
                        .WithMany("ArticleActors")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.ArticlePhrase", b =>
                {
                    b.HasOne("ddPoliglotV6.Data.Models.ArticleActor", "ArticleActor")
                        .WithMany()
                        .HasForeignKey("ArticleActorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ddPoliglotV6.Data.Models.Article", "Article")
                        .WithMany("ArticlePhrases")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ddPoliglotV6.Data.Models.ArticleActor", "TrArticleActor")
                        .WithMany()
                        .HasForeignKey("TrArticleActorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("ArticleActor");

                    b.Navigation("TrArticleActor");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.Lesson", b =>
                {
                    b.HasOne("ddPoliglotV6.Data.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.MixItem", b =>
                {
                    b.HasOne("ddPoliglotV6.Data.Models.MixParam", null)
                        .WithMany("MixItems")
                        .HasForeignKey("MixParamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.Word", b =>
                {
                    b.HasOne("ddPoliglotV6.Data.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.WordPhrase", b =>
                {
                    b.HasOne("ddPoliglotV6.Data.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.WordPhraseTranslation", b =>
                {
                    b.HasOne("ddPoliglotV6.Data.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ddPoliglotV6.Data.Models.WordPhrase", "WordPhrase")
                        .WithMany()
                        .HasForeignKey("WordPhraseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("WordPhrase");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.WordPhraseWord", b =>
                {
                    b.HasOne("ddPoliglotV6.Data.Models.Word", "Word")
                        .WithMany("WordPhraseWords")
                        .HasForeignKey("WordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ddPoliglotV6.Data.Models.WordPhrase", "WordPhrase")
                        .WithMany("WordPhraseWords")
                        .HasForeignKey("WordPhraseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Word");

                    b.Navigation("WordPhrase");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.WordTranslation", b =>
                {
                    b.HasOne("ddPoliglotV6.Data.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ddPoliglotV6.Data.Models.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.WordUser", b =>
                {
                    b.HasOne("ddPoliglotV6.Data.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ddPoliglotV6.Data.Models.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.WordsForPhraseState", b =>
                {
                    b.HasOne("ddPoliglotV6.Data.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.Article", b =>
                {
                    b.Navigation("ArticleActors");

                    b.Navigation("ArticlePhrases");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.MixParam", b =>
                {
                    b.Navigation("MixItems");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.Word", b =>
                {
                    b.Navigation("WordPhraseWords");
                });

            modelBuilder.Entity("ddPoliglotV6.Data.Models.WordPhrase", b =>
                {
                    b.Navigation("WordPhraseWords");
                });
#pragma warning restore 612, 618
        }
    }
}
